// *************************************************
// DataTools C# Native Utility Library For Windows - Interop
//
// Module: Utility
//         Miscellaneous Utility Functions
//
// Copyright (C) 2011-2023 Nathaniel Moschkin
// All Rights Reserved
//
// Licensed Under the Apache 2.0 License
// *************************************************

using System;
using System.Diagnostics;
using System.IO;

namespace DataTools.Win32
{
    /// <summary>
    /// Public utility methods
    /// </summary>
    public static class FileTools
    {
        public static bool MoveFile(string oldPath, string newPath)
        {
            return IO.MoveFile(oldPath, newPath) == 0 ? false : true;
        }

        /// <summary>
        /// Completely destroy a directory
        /// </summary>
        /// <param name="directory"></param>
        /// <remarks></remarks>
        public static bool DeleteWithExtremePrejudice(string directory, bool preserveRoot = true)
        {
            var sh = new SHFILEOPSTRUCT();
            directory = Path.GetFullPath(directory);

            sh.hWnd = IntPtr.Zero;
            sh.pFrom = directory + '\x0';

            sh.wFunc = User32.FO_DELETE;
            sh.fFlags = User32.FOF_SILENT | User32.FOF_NOCONFIRMATION | User32.FOF_NOERRORUI | User32.FOF_NOCONFIRMMKDIR;
            return User32.SHFileOperation(sh) == 0;
        }

        /// <summary>
        /// Retrieves the combined total file size for every file match string in an array.
        /// </summary>
        /// <param name="FileNames">Array of filenames or filename search patterns (wildcards).</param>
        /// <returns>Total combined size of all discovered files.</returns>
        /// <remarks></remarks>
        public static long SizeOfAll(string[] FileNames)
        {
            long gt = 0L;
            IntPtr h;
            var fd = new WIN32_FIND_DATA();
            foreach (string s in FileNames)
            {
                h = IO.FindFirstFile(s, ref fd);
                if ((long)h == -1)
                    continue;
                do
                {
                    gt += fd.nFileSize;
                    fd = new WIN32_FIND_DATA();
                }
                while (IO.FindNextFile(h, ref fd));
                IO.FindClose(h);
            }

            return gt;
        }

        /// <summary>
        /// Starts a new process.
        /// </summary>
        /// <param name="fileName"></param>
        /// <param name="args"></param>
        /// <returns></returns>
        /// <remarks></remarks>
        public static bool Execute(string fileName, string args = null)
        {
            var proc = new Process();
            proc.StartInfo.FileName = fileName;
            proc.StartInfo.UseShellExecute = true;
            proc.StartInfo.Arguments = args;
            proc.Start();
            return true;
        }

        /// <summary>
        /// Returns true if the file is an exe.
        /// </summary>
        /// <param name="fileName"></param>
        /// <returns></returns>
        /// <remarks></remarks>
        public static bool IsExe(string fileName)
        {
            return fileName.Substring(fileName.Length - 4, 4).ToLower() == ".exe";
        }

        /// <summary>
        /// Returns whether or not a file consists of the given extension.
        /// </summary>
        /// <param name="fileName"></param>
        /// <param name="ext"></param>
        /// <returns></returns>
        /// <remarks></remarks>
        public static bool IsExt(string fileName, string ext)
        {
            if ((fileName.Substring(fileName.Length - (ext.Length + 1), ext.Length + 1).ToLower() ?? "") == ("." + ext ?? ""))
                return true;
            else
                return false;
        }

        // SHBrowseForFolder callback function

        /// <summary>
        /// SHBrowseForFolder callback function.
        /// </summary>
        /// <param name="hWnd"></param>
        /// <param name="uMsg"></param>
        /// <param name="wParam"></param>
        /// <param name="lParam"></param>
        /// <returns></returns>
        /// <remarks>
        /// Since we need the absolute path, we take the path of the most recently
        /// selected item.  The only way to do that is through processing of the
        /// BFFM_SELCHANGED event generated by SHBrowseForFolder, and retrieve the
        /// full path using the SHGetPathFromIDList and wParam
        /// </remarks>
        public static int BrowseCallback(IntPtr hWnd, short uMsg, int wParam, int lParam)
        {
            if (uMsg == User32.BFFM_SELCHANGED)
            {
                User32.mBrowseCurrent = new string('\0', 260);
                User32.SHGetPathFromIDList(wParam, User32.mBrowseCurrent);
                User32.BrowserLastFolder = wParam;
            }

            return 0;
        }

        /// <summary>
        /// Gets the file's attributes.
        /// </summary>
        /// <param name="fileName"></param>
        /// <returns></returns>
        /// <remarks></remarks>
        public static FileAttributes GetFileAttributes(string fileName)
        {
            var wf = new WIN32_FIND_DATA();
            IntPtr i;

            i = IO.FindFirstFile(fileName, ref wf);

            if ((long)i != -1L)
            {
                IO.FindClose(i);
                return wf.dwFileAttributes;
            }
            else
            {
                return 0;
            }
        }

        /// <summary>
        /// Set the file's attributes.
        /// </summary>
        /// <param name="fileName"></param>
        /// <param name="attr"></param>
        /// <returns></returns>
        /// <remarks></remarks>
        public static bool SetFileAttributes(string fileName, FileAttributes attr)
        {
            if (!FileExists(fileName)) return false;
            return IO.pSetFileAttributes(fileName, (int)attr) == 0 ? false : true;
        }

        // Return the three dates of the given file

        /// <summary>
        /// Gets the file time stamps.
        /// </summary>
        /// <param name="fileName"></param>
        /// <param name="creationTime"></param>
        /// <param name="lastAccessTime"></param>
        /// <param name="lastWriteTime"></param>
        /// <remarks></remarks>
        public static void GetFileTime(string fileName, out DateTime creationTime, out DateTime lastAccessTime, out DateTime lastWriteTime)
        {
            var wf = new WIN32_FIND_DATA();
            IntPtr i;

            fileName = fileName.Trim('\\');

            i = IO.FindFirstFile(fileName, ref wf);

            if ((long)i != -1)
            {
                IO.FindClose(i);
                creationTime = FileToLocal(wf.ftCreationTime);
                lastAccessTime = FileToLocal(wf.ftLastAccessTime);
                lastWriteTime = FileToLocal(wf.ftLastWriteTime);
            }
            else
            {
                creationTime = default(DateTime);
                lastAccessTime = default(DateTime);
                lastWriteTime = default(DateTime);
            }
        }

        /// <summary>
        /// Set the file time stamps to the specified times.
        /// </summary>
        /// <param name="filename"></param>
        /// <param name="creationTime"></param>
        /// <param name="lastAccessTime"></param>
        /// <param name="lastWriteTime"></param>
        /// <remarks></remarks>
        public static void SetFileTime(string filename, FILETIME creationTime, FILETIME lastAccessTime, FILETIME lastWriteTime)
        {
            IntPtr hFile;
            if (Directory.Exists(filename))
            {
                hFile = IO.CreateFile(filename, IO.FILE_WRITE_ATTRIBUTES, 0, IntPtr.Zero, IO.OPEN_EXISTING, IO.FILE_FLAG_BACKUP_SEMANTICS, IntPtr.Zero);
            }
            else if (File.Exists(filename))
            {
                hFile = IO.CreateFile(filename, IO.FILE_WRITE_ATTRIBUTES, 0, IntPtr.Zero, IO.OPEN_EXISTING, 0, IntPtr.Zero);
            }
            else
            {
                return;
            }

            if ((long)hFile == -1L)
            {
                int g = User32.GetLastError();
                return;
            }

            try
            {
                IO.pSetFileTime2(hFile, ref creationTime, ref lastAccessTime, ref lastWriteTime);
            }
            catch
            {
                // MsgBox(ex.Message)
            }

            User32.CloseHandle(hFile);
        }

        /// <summary>
        /// Set the file time stamps to the specified times.
        /// </summary>
        /// <param name="fileName"></param>
        /// <param name="creationTime"></param>
        /// <param name="lastAccessTime"></param>
        /// <param name="lastWriteTime"></param>
        /// <remarks></remarks>
        public static void SetFileTime(string fileName, DateTime creationTime, DateTime lastAccessTime, DateTime lastWriteTime)
        {
            var wf = default(WIN32_FIND_DATA);
            LocalToFileTime(creationTime, ref wf.ftCreationTime);
            LocalToFileTime(lastAccessTime, ref wf.ftLastAccessTime);
            LocalToFileTime(lastWriteTime, ref wf.ftLastWriteTime);
            SetFileTime(fileName, wf.ftCreationTime, wf.ftLastAccessTime, wf.ftLastWriteTime);
        }

        // Get the size of a file

        /// <summary>
        /// Returns the file size in the style of the native function, with a high DWORD and a low DWORD.
        /// </summary>
        /// <param name="fileName"></param>
        /// <param name="lpSizeHigh"></param>
        /// <returns></returns>
        /// <remarks></remarks>
        public static uint GetFileSize(string fileName, ref uint lpSizeHigh)
        {
            IntPtr hFile;
            uint SL;
            var lpSh = default(uint);
            if (!FileExists(fileName))
                return 0U;
            hFile = IO.CreateFile(fileName, IO.GENERIC_READ, 0, IntPtr.Zero, IO.OPEN_EXISTING, 0, IntPtr.Zero);
            if ((long)hFile == -1L)
                return 0U;
            SL = IO.pGetFileSize(hFile, ref lpSh);
            lpSizeHigh = lpSh;
            User32.CloseHandle(hFile);
            return SL;
        }

        /// <summary>
        /// Returns the size of the file using the native function.
        /// </summary>
        /// <param name="fileName"></param>
        /// <returns></returns>
        /// <remarks></remarks>
        public static long GetFileSize(string fileName)
        {
            var h = default(uint);
            uint l;
            l = GetFileSize(fileName, ref h);
            return MakeLong(l, (int)h);
        }

        // Returns a boolean indicating weather the file exists or not

        /// <summary>
        /// Returns true if the file exists.  Users native function.
        /// </summary>
        /// <param name="fileName"></param>
        /// <returns></returns>
        /// <remarks></remarks>
        public static bool FileExists(string fileName)
        {
            var wf = new WIN32_FIND_DATA();
            IntPtr i;
            i = IO.FindFirstFile(fileName, ref wf);
            if ((long)i != -1L)
            {
                IO.FindClose(i);
                return true;
            }

            return false;
        }

        // Returns a boolean indicating weather the folder exists or not

        /// <summary>
        /// Returns true if the path exists.  Uses native function.
        /// </summary>
        /// <param name="path"></param>
        /// <returns></returns>
        /// <remarks></remarks>
        public static bool PathExists(string path)
        {
            IntPtr h;

            int i;
            string s;

            var wf = new WIN32_FIND_DATA();
            var df = default(bool);

            s = path;
            i = s.Length;

            if (i == 0)
                return false;

            if (s.LastIndexOf(@"\") == s.Length - 1 & i != 3)
            {
                s = s.Substring(0, i - 1);
            }
            else if (i == 3 & s.Substring(i - 2, 2) == @":\")
            {
                s = s + "*.*";
                df = true;
            }

            h = IO.FindFirstFile(s, ref wf);
            if ((int)h != -1L)
            {
                if (((int)wf.dwFileAttributes & IO.FILE_ATTRIBUTE_DIRECTORY) == IO.FILE_ATTRIBUTE_DIRECTORY | df == true)
                {
                    IO.FindClose(h);
                    return true;
                }

                IO.FindClose(h);
            }

            return false;
        }

        /// <summary>
        /// Retrieves the location of a special folder.
        /// </summary>
        /// <param name="hWnd"></param>
        /// <param name="fSpcPath"></param>
        /// <returns></returns>
        /// <remarks></remarks>
        public static string GetSpecialFolder(IntPtr hWnd, SpecialFolderConstants fSpcPath)
        {
            var lpStr = new string('\0', 512);

            User32.SHGetSpecialFolderPath(hWnd, lpStr, (int)fSpcPath, false);

            return lpStr.Trim('\0');
        }

        /// <summary>
        /// Converts a FILETIME structure into a DateTime object in the local time zone.
        /// </summary>
        /// <param name="lpTime"></param>
        /// <returns></returns>
        /// <remarks></remarks>
        public static DateTime FileToLocal(FILETIME lpTime)
        {
            DateTime pDate;
            TimeSpan pTime;

            var lpSystem = new SYSTEMTIME();
            var ftLocal = new FILETIME();

            // convert the filetime from UTC to local time
            IO.FileTimeToLocalFileTime(ref lpTime, ref ftLocal);

            // convert the FILETIME structure to a system time structure
            IO.FileTimeToSystemTime(ref ftLocal, ref lpSystem);

            // construct a Date variable from the system time structure.
            pTime = new TimeSpan(0, lpSystem.wHour, lpSystem.wMinute, lpSystem.wSecond, lpSystem.wMilliseconds);

            try
            {
                pDate = new DateTime(lpSystem.wYear, lpSystem.wMonth, lpSystem.wDay);
                return pDate.Add(pTime);
            }
            catch
            {
                return DateTime.Now;
            }
        }

        /// <summary>
        /// Converts a FILETIME structure into a DateTime object in the system time zone (generally UTC).
        /// </summary>
        /// <param name="lpTime"></param>
        /// <returns></returns>
        /// <remarks></remarks>
        public static DateTime FileToSystem(FILETIME lpTime)
        {
            DateTime pDate;
            TimeSpan pTime;

            var lpSystem = new SYSTEMTIME();

            IO.FileTimeToSystemTime(ref lpTime, ref lpSystem);

            pTime = new TimeSpan(lpSystem.wHour, lpSystem.wMinute, lpSystem.wSecond);
            pDate = new DateTime(lpSystem.wYear, lpSystem.wMonth, lpSystem.wDay);

            return pDate.Add(pTime);
        }

        /// <summary>
        /// Converts a DateTime object containing a UTC time value into a FILETIME structure
        /// </summary>
        /// <param name="time"></param>
        /// <param name="lpTime"></param>
        /// <remarks></remarks>
        public static void SystemToFileTime(DateTime time, ref FILETIME lpTime)
        {
            var st = new SYSTEMTIME()
            {
                wYear = (ushort)time.Year,
                wMonth = (ushort)time.Month,
                wDay = (ushort)time.Day,
                wHour = (ushort)time.Hour,
                wMinute = (ushort)time.Minute,
                wSecond = (ushort)time.Second
            };

            IO.SystemTimeToFileTime(ref st, ref lpTime);
        }

        /// <summary>
        /// Converts a DateTime object containing a local time value into a FILETIME structure
        /// </summary>
        /// <param name="time"></param>
        /// <param name="lpTime"></param>
        /// <remarks></remarks>
        public static void LocalToFileTime(DateTime time, ref FILETIME lpTime)
        {
            var st = new SYSTEMTIME()
            {
                wYear = (ushort)time.Year,
                wMonth = (ushort)time.Month,
                wDay = (ushort)time.Day,
                wHour = (ushort)time.Hour,
                wMinute = (ushort)time.Minute,
                wSecond = (ushort)time.Second,
                wMilliseconds = (ushort)time.Millisecond
            };

            var lft = new FILETIME();

            IO.SystemTimeToFileTime(ref st, ref lft);
            IO.LocalFileTimeToFileTime(ref lft, ref lpTime);
        }

        /// <summary>
        /// Combines two integers into a long.
        /// </summary>
        /// <param name="dwLow"></param>
        /// <param name="dwHigh"></param>
        /// <returns></returns>
        /// <remarks></remarks>
        internal static long MakeLong(uint dwLow, int dwHigh)
        {
            return (long)dwHigh << 32 | dwLow;
        }

        /// <summary>
        /// Combines two shorts into an int.
        /// </summary>
        /// <param name="dwLow"></param>
        /// <param name="dwHigh"></param>
        /// <returns></returns>
        /// <remarks></remarks>
        internal static int MakeInt(ushort dwLow, short dwHigh)
        {
            return dwHigh << 16 | dwLow;
        }

        /// <summary>
        /// Makes an int resource (basically a new IntPtr with a value of i).
        /// </summary>
        /// <param name="i"></param>
        /// <returns></returns>
        /// <remarks></remarks>
        internal static IntPtr MAKEINTRESOURCE(int i)
        {
            return new IntPtr(i);
        }
    }
}